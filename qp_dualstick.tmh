//**************************************************************************
//	STAR CITIZEN TARGET Profile
//		- Thrustmaster Warthog HOTAS
//		- Thrustmaster T16000 Dual sticks
//		- Thrustmaster Rudder Pedals
//		
//	Written by qp
// 		https://robertsspaceindustries.com/citizens/q-p
//
//**************************************************************************
//qp_dualstick.tmh


// if you are using a Warthog HOTAS or main Stick, you need to comment the below line.
		// you comment a line by adding "//" at the begining of the line
//Makes the Left Stick Trigger the Shift layer trigger
SetShiftButton(&left, TS1);
//.


//DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT YOU ARE DOING!
//USER-CUSTOMISABLE SETTINGS ARE IN qp_settings.tmh file

// Left Stick
	// make sure nothing happens when pressing left trigger alone
	MapKey (&left, TS1, 0); // remember: //Map_IO (Shift,noShift)
	//TS2: With Shift: SCM mode | Boost
	MapKeyIO (&left, TS2, EXEC ("SCMMode();"), Movement_Boost); 
		//MapKeyRIO (&left, TS2, 0, EXEC ("HUD_Mode_Disengage();"));
	//TS3: With Shift: PRE mode | Mobiglass?
	MapKeyIO (&left, TS3, EXEC ("PREMode();"), TEMPO(Movement_Break, CHAIN(Movement_Break,Movement_Boost), Emergency_Breaks_Timer));
	//TS4: With Shift: CRU mode | PPT
	MapKeyIO (&left, TS4, EXEC ("CRUMode();"), Voice_Comms_PPT);
	
	
	//code for having 2 buttons in one after short/long press
	//TEMPO(key1, key2, delay)
	//below to be used for controlling mouse (viewing around/augmented reality mode)
// 	AXIS(DirectX axis name, increment, delay before repeat);
// Example: virtual mouse over the Joystick HAT 2
// MapKey(&Joystick, H1U, AXIS(MOUSE_Y_AXIS, -80, 20));
// MapKey(&Joystick, H1D, AXIS(MOUSE_Y_AXIS, 80, 20));
// MapKey(&Joystick, H1L, AXIS(MOUSE_X_AXIS, -80, 20));
// MapKey(&Joystick, H1R, AXIS(MOUSE_X_AXIS, 80, 20));
	
// la.la dual stick setup - right stick

	// TS1: fire G1, fire G1-4 with shift (left trigger)
	MapKeyIO(&right, TS1, CHAIN(Systems_IFCS_ESP, Weapons_Fire_G1, Weapons_Fire_G2, Weapons_Fire_G3, Weapons_Fire_G4), CHAIN(Weapons_Fire_G1, Systems_IFCS_ESP)); //trigger
	// TS2: Lock/Fire Missiles, Cycle Weapon Groups 1-4 for main trigger (with Shift)
	MapKeyIO(&right, TS2, 
SEQ(
	CHAIN(
	EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1+LED2));"),
	EXEC("MapKeyIO(&right, TS1, CHAIN(Systems_IFCS_ESP, Weapons_Fire_G1, Weapons_Fire_G2, Weapons_Fire_G3, Weapons_Fire_G4), CHAIN(Weapons_Fire_G2, Systems_IFCS_ESP));")
	)
	,
	CHAIN(
	EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1+LED2));"),
	EXEC("MapKeyIO(&right, TS1, CHAIN(Systems_IFCS_ESP, Weapons_Fire_G1, Weapons_Fire_G2, Weapons_Fire_G3, Weapons_Fire_G4), CHAIN(Weapons_Fire_G3, Systems_IFCS_ESP));")
	)
	,
	CHAIN(
	EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1-LED2));"),
	EXEC("MapKeyIO(&right, TS1, CHAIN(Systems_IFCS_ESP, Weapons_Fire_G1, Weapons_Fire_G2, Weapons_Fire_G3, Weapons_Fire_G4), CHAIN(Weapons_Fire_G4, Systems_IFCS_ESP));")
	)
	,
	CHAIN(
	EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1-LED2));"),
	EXEC("MapKeyIO(&right, TS1, CHAIN(Systems_IFCS_ESP, Weapons_Fire_G1, Weapons_Fire_G2, Weapons_Fire_G3, Weapons_Fire_G4), CHAIN(Weapons_Fire_G1, Systems_IFCS_ESP));")
	)
)
, 
Weapons_Missile);
		// for switching ts1 weapon group MapKey(&Joystick, S1, SEQ(CHAIN(EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1+LED2));"),EXEC("MapKey(&Joystick, TG1, CHAIN(Weapons_Fire_G2, Systems_IFCS_ESP));")),CHAIN(EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1+LED2));"),EXEC("MapKey(&Joystick, TG1, CHAIN(Weapons_Fire_G3, Systems_IFCS_ESP));")),CHAIN(EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1-LED2));"),EXEC("MapKey(&Joystick, TG1, CHAIN(Weapons_Fire_G4, Systems_IFCS_ESP));")),CHAIN(EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1-LED2));"),EXEC("MapKey(&Joystick, TG1, CHAIN(Weapons_Fire_G1, Systems_IFCS_ESP));"))));
	// TS4 (right button) Cycle Hostile / Cycle Friendly
	MapKeyIO(&right, TS4, PULSE + Targeting_Cycle_Friendly, PULSE + Targeting_Cycle_Hostile);
	// TS3 (left button) Cycle Hostile Back / Cycle Friendly Back
	MapKeyIO(&right, TS3, PULSE + Targeting_Cycle_Back_Friendly, PULSE + Targeting_Cycle_Back_Hostile);

// End of File
// qp
// .