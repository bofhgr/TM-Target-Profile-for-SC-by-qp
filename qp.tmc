//*****************************************************************************************************************
//	STAR CITIZEN TARGET Profile by qp
//		Supports the below combinations of Thrustmaster products:
//		- Thrustmaster Warthog HOTAS (Fully Supported)
//		- Thrustmaster Rudder Pedals (Fully Supported)
//		- Thrustmaster TM16000 Dual sticks (Fully Supported)
//		- Thrustmaster FCS HOTAS (WIP)
//		- Thrustmaster MFDs (TBA)
//		- Right Stick (Warthog or TM16000) with Keyboard (TBA)
//		- Left Stick (Warthog or TM16000) with Mouse (TBA)
//		- Thrustmaster Warthog Dual sticks (TBA)
//		
//	Written by qp
// 		https://robertsspaceindustries.com/citizens/q-p
//	
//
//*****************************************************************************************************************
//
//Version Info
//Updated for Star Citizen 3.0 PTU
//Last Update: Dec 01 2017
//*****************************************************************************************************************
//*****************************************************************************************************************
//DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT YOU ARE DOING!
//USER-CUSTOMISABLE SETTINGS ARE IN qp_custom_settings.tmh file
//*****************************************************************************************************************
//Pre Initialization
	//Initialize Variables, Functions and Options 
		// Include basic TARGET instructions
		include "target.tmh"
		// Include user customizable settings
		include "qp_custom_settings.tmh"
		// Include custom bindings and keyboard mappings
		include "qp_mapping.ttm"
		// Include scripts, functions and routines
		include "qp_engine.tmh"
		// Include Custom settings
		include "qp_my_settings.tmh"
	// 0.2 custom flags
		// create a flag to track countermeasures
		char countermeasure;
		// create a flag to track Flight Mode
		char Flight_Mode;
		// create a flag to track Ship and FPS lights
		char Lights_Ship;
		char Lights_FPS;
		// Augmented Reality Mode
		char AR_Mode;
		//Free Look Mode
		char Free_Look_Mode;
		// Swap Roll with Yaw
		char Roll_Yaw_Swapped;
	// 0.3 TM16000FCS L/R Setup
		alias left;
		alias right;
	//.Pre Initialization
//Main Initialization
int main()
{	
	Configure(&HCougar, MODE_EXCLUDED);
	if (Controller_TM16000_DualStick==0)
	{
		Configure(&T16000, MODE_EXCLUDED);
		Configure(&T16000L, MODE_EXCLUDED);
	}
	if (Controller_Warthog_HOTAS==0)
	{
		Configure(&Joystick, MODE_EXCLUDED);
		Configure(&Throttle, MODE_EXCLUDED);
	}
	if (Controller_TM_MFDs==0)
	{
		Configure(&LMFD, MODE_EXCLUDED);
		Configure(&RMFD, MODE_EXCLUDED);
	}
	if (Controller_TM16000_FCSHOTAS==0)
	{
		Configure(&TWCSThrottle, MODE_EXCLUDED);
	}
	if (Controller_TMFR_Pedals==0)
	{
		Configure(&TFRPRudder, MODE_EXCLUDED);
	} //else {Configure(&TFRPRudder, MODE_KEEPENABLED);}
	//declare the event handler, return on error
	if(Init(&EventHandle)) return 1;
//Additional Parameters
	// Set repeat delay for keyboard commands
		SetKBRate(25, 60);
	//keyboard language
		SetKBLayout(KB_ENG);
	//Initialize Dual Sticks alias for easier reference
		&right = &T16000; //do not change
		&left = &T16000L; //do not change
	//Starting Advanced IFCS Flight Mode (see qp_settings.tmh)
		Starting_Advanced_Flight_Mode();
		//for testing Sensitivity_Mode();
	//Starting countermeasure=flare, change to 0 for chaff
		countermeasure=1;
	//Free Look
		Free_Look_Mode=0;
	//AR Mode
		AR_Mode=0;
	//.Additional Parameters
//Warthog HOTAS Initialization
	if (Controller_Warthog_HOTAS==1)
	{
	// Axis Assignment - Rotation Axis
		// X Axis - Yaw
			//Warthog Stick - Stick Left/Right
			MapAxis(&Joystick, JOYX, DX_X_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
		// Y Axis - Pitch	
			//Warthog Stick - Stick Forwards/Backwards
			MapAxis(&Joystick, JOYY, DX_Y_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	// Axis Assignment - Translation Axis
		// YROT Axis - Strafe Forwards / Backwards
			//Warthog Throttle - Right Engine Throttle
				//Not mapped initially as we're mapping this when selected with boat switch/advanced flight mode
		// ZROT Axis - Strafe Up / Down
			//Warthog Throttle - Left Engine Throttle
			MapAxis(&Throttle, THR_LEFT, DX_ZROT_AXIS, AXIS_REVERSED, MAP_ABSOLUTE);
	// Axis Assignement - Throttle Axis and Slider Axis
		// THROTTLE Axis - Throttle 0-100
			//Warthog Throttle - Right Engine Throttle
			MapAxis(&Throttle, THR_RIGHT, DX_THROTTLE_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);	
		// SLIDER Axis - Dynamic Zoom In/Out
			//Warthog Throttle
			MapAxis(&Throttle, THR_FC, DX_SLIDER_AXIS, AXIS_REVERSED, MAP_ABSOLUTE);
	// Shift State (I/O) and Layers (U/M/D)
		// IO Shift is Joystick Paddle (S4) 
			// Paddle will be used with various keys to give you quick access to more commmands
		// UMD Layer selector is FLAPS
			// FLAPS switch will reflect what control scheme is active for the Warthog HOTAS (WIP)
			// UP for when you are in Augmented Reality Mode (new in 3.0)
			// MVR for when you are in flight, combat or otherwise
			// DN when you are in Camera Director Mode
		SetShiftButton(&Joystick, S4, &Throttle, FLAPU, FLAPD);
	// Throttle Mappings	
		//FLAPS
			// Flaps when moved Forward (UP) will enter Augemented Reality mode (interaction mode)
				MapKey(&Throttle, FLAPU, EXEC ("AR_Mode_Engage();"));
				MapKeyR(&Throttle, FLAPU, EXEC ("AR_Mode_Disengage();"));
			// for flaps down to control Camera Director mode: http://scfocus.org/camera-controls/
				MapKey(&Throttle, FLAPD, DOWN + View_Switch);
				MapKeyR(&Throttle, FLAPD, UP + View_Switch);
		//Coolie Switch (CS)
			// LEFT
				MapKeyIOUMD(&Throttle, CSL, 
				//FLAPS UP (MFD/HUD Interaction Mode) (MFD/HUD Customize Mode) and Paddle
					0,
				//FLAPS UP (MFD/HUD Interaction Mode) (MFD/HUD Customize Mode)
					0,
				//Flaps MVR (Flight mode) and Paddle
					Movement_Roll_Right,
				//Flaps MVR (Flight mode)
					Movement_Strafe_Left,
				//Flaps DN (Camera Director Mode) and Paddle
					0,
				//Flaps DN (Camera Director Mode)
					0);
			// RIGHT
				MapKeyIOUMD(&Throttle, CSR, 
				//FLAPS UP (MFD/HUD Interaction Mode) (MFD/HUD Customize Mode) and Paddle
					0,
				//FLAPS UP (MFD/HUD Interaction Mode) (MFD/HUD Customize Mode)
					0,
				//Flaps MVR (Flight mode) and Paddle
					Movement_Roll_Right,
				//Flaps MVR (Flight mode)
					Movement_Strafe_Right,
				//Flaps DN (Camera Director Mode) and Paddle
					0,
				//Flaps DN (Camera Director Mode)
					0);
			// UP
				MapKeyIOUMD(&Throttle, CSU, 
				//FLAPS UP (MFD/HUD Interaction Mode) (MFD/HUD Customize Mode) and Paddle
					0,
				//FLAPS UP (MFD/HUD Interaction Mode) (MFD/HUD Customize Mode)
					0,
				//Flaps MVR (Flight mode) and Paddle
					Movement_Strafe_Forward,
				//Flaps MVR (Flight mode)
					Movement_Strafe_Up,
				//Flaps DN (Camera Director Mode) and Paddle
					0,
				//Flaps DN (Camera Director Mode)
					0);
			// DOWN
				MapKeyIOUMD(&Throttle, CSD, 
				//FLAPS UP (MFD/HUD Interaction Mode) (MFD/HUD Customize Mode) and Paddle
					0,
				//FLAPS UP (MFD/HUD Interaction Mode) (MFD/HUD Customize Mode)
					0,
				//Flaps MVR (Flight mode) and Paddle
					Movement_Strafe_Backward,
				//Flaps MVR (Flight mode)
					Movement_Strafe_Down,
				//Flaps DN (Camera Director Mode) and Paddle
					0,
				//Flaps DN (Camera Director Mode)
					0);
		//Throttle Thumb button (MS) ****
			// Throttle Thumb (MS) changes HUD Tab and controls Top/Bottom Shields as well as Voice Commms PPT and scoreboard/mobiglass, scan mode
			// UP: HUD Screen Left			Transfer Shields Top
				MapKeyIO(&Throttle, MSU, PULSE + HUD_Screen_Left , EXEC("DoShields(Shields_Transfer_Top);"));
				MapKeyRIO(&Throttle, MSU, 0, EXEC("ActKey(Shields_Transfer_Top);"));// DeferCall(HUD_Response_Timer, &OnHUDCallback, 0);"));
			// DOWN: HUD Screen Right 		Transfer Shields Bottom
				MapKeyIO(&Throttle, MSD, PULSE + HUD_Screen_Right, EXEC("DoShields(Shields_Transfer_Bottom);"));
				MapKeyRIO(&Throttle, MSD, 0, EXEC("ActKey(Shields_Transfer_Bottom);"));//DeferCall(HUD_Response_Timer, &OnHUDCallback, 0);"));
			// LEFT: Push-To-Talk (no paddle), HotMic toggle (with Paddle) - this will turn on SCRLOCK LED on Keyboard when you are talking
				MapKeyIO(&Throttle, MSL, KEYON+DOWN+Voice_Comms_PPT, Voice_Comms_PPT);
				MapKeyRIO(&Throttle, MSL,  KEYON+UP+Voice_Comms_PPT, 0);
			// RIGHT: Toggle Mobiglass (no paddle), Toggle New AR mode (with Paddle)
				MapKeyIO(&Throttle, MSR, SEQ(EXEC("AR_Mode_Engage();"),EXEC("AR_Mode_Disengage();")), View_Mobiglass);
				// MapKeyRIO(&Throttle, MSR, 0, 0);
			// PRESS: HUD Cancel		Reset Power
				MapKeyIO(&Throttle, MSP, PULSE + HUD_Cancel, PULSE + Systems_Power_Reset);
		//RDR Free ***
			// RDRDIS
				MapKey(&Throttle, RDRDIS, 0);
			// RDRNRM
				MapKey(&Throttle, RDRNRM, 0);
		//EACON Free ****
			// EACON
				MapKey(&Throttle, EACON, 0);
				//MapKeyUMD(&Throttle, EACOFF, PULSE + Systems_Toggle_Weapons, PULSE + Systems_Toggle_Shields, PULSE + Systems_Toggle_Engines);
			// EACOFF
				MapKey(&Throttle, EACOFF, 0);
				//MapKeyUMD(&Throttle, EACON, PULSE + Systems_Toggle_Weapons, PULSE + Systems_Toggle_Shields, PULSE + Systems_Toggle_Engines);
		//LASTE Switch
			// Travel Mode Selection: Laste Switchs affects AUTOPILOT ENGAGE (AE) and LANDING GEAR WARNING (LGW) buttons on the throttle. 
			// LASTE PATH (up): LGW: toggles Quantum Drive HUD (depricated 3.0), AE: Engage Quantum Drive
				MapKey(&Throttle, APPAT, CHAIN(EXEC("MapKey(&Throttle,APENG,PULSE + Flight_QD_Engage);"),EXEC("MapKey(&Throttle,LDGH,PULSE + Flight_QD_HUD);")));
			// LASTE ALT/HDG (mid): LGW: toggles Matches Target Velocity, AE: toggles Decouple mode. Press and HOLD LGW to Eject!
				MapKeyR(&Throttle, APPAT, CHAIN(EXEC("MapKey(&Throttle,APENG,PULSE + Systems_IFCS_Decouple);"),EXEC("MapKey(&Throttle,LDGH,TEMPO(PULSE + Flight_Match_Target_Velocity, PULSE + Flight_Eject, Eject_Hold_Timer));")));
			// LASTE ALT (down): LGW: toggles Landing Mode (extract gear, call ATC for landing), AE: Toggles Flight Ready mode(autostart). Press and HOLD LGW to enable Auto-Land mode.
				MapKey(&Throttle, APALT, CHAIN(EXEC("MapKey(&Throttle,APENG,PULSE + Flight_Ready_Mode);"),EXEC("MapKey(&Throttle,LDGH,TEMPO(PULSE + Flight_Landing_Mode, Flight_Auto_Land, Auto_Land_Hold_Timer));")));
			// LASTE ALT/HDG (mid): LGW: toggles Matches Target Velocity, AE: toggles Decouple mode. Press and HOLD LGW to Eject!
				MapKeyR(&Throttle, APALT, CHAIN(EXEC("MapKey(&Throttle,APENG,PULSE + Systems_IFCS_Decouple);"),EXEC("MapKey(&Throttle,LDGH,TEMPO(PULSE + Flight_Match_Target_Velocity, PULSE + Flight_Eject, Eject_Hold_Timer));")));		
		//Pinky Switch
				// Pinky switch controls cameras - Forward-Middle-Forward will cycle thru available cameras. Backwards will keep camera button pressed so you can change the camera angle by moving the mouse
				MapKey(&Throttle, PSF, PULSE + View_Switch);
				// we don;t want release of this switch to trigger another view, or do we?
				MapKeyR(&Throttle, PSF, PULSE + View_Switch);
				MapKey(&Throttle, PSB, PULSE + View_Switch);
				MapKeyR(&Throttle, PSB, PULSE + View_Switch);
		//LTB 
			//Center EDTracker/TrackIR
				MapKeyIO(&Throttle, LTB, PULSE + View_TrackIR_Precision, CHAIN(PULSE + View_Look_Ahead, D(),PULSE + View_Center_HeadTracking));
		//SC 
			//Unbound / Used only in AR Mode?
				MapKey (&Throttle, SC, 0);
		//BOAT Switch
			// Applies the Advanced IFCS Flight Modes
			// Back is Sensitivity mode
				MapKey(&Throttle, BSB, EXEC ("Sensitivity_Mode();"));
			// Middle is Normal mode or Combat Mode with Paddle
				MapKeyRIO(&Throttle, BSB, EXEC ("Combat_Mode();"), EXEC ("Precision_Mode();"));
			// Forward is Agility mode
				MapKey(&Throttle, BSF, EXEC ("Agility_Mode();"));
			// Middle is Normal mode or Combat Mode with Paddle
				MapKeyRIO(&Throttle, BSF, EXEC ("Combat_Mode();"), EXEC ("Precision_Mode();"));
		//CHINAHAT controls IFCS Safeties
			// Forward: Decouple / with paddle: ESP Toggle
				MapKeyIO (&Throttle, CHF, Systems_IFCS_ESP_Toggle, Systems_IFCS_Decouple);
			// Backward: Gsafe Mode Toggle / with paddle: CommStab mode toggle
				MapKeyIO (&Throttle, CHB, Systems_IFCS_COMSTAB, Systems_IFCS_GSafe);			
		//EFL OVER/NORM free ****
				MapKey(&Throttle, EFLOVER , 0);
				MapKey(&Throttle, EFLNORM , 0);
		//EFR OVER/NORM also empty **** 
				MapKey(&Throttle, EFROVER , 0);
				MapKey(&Throttle, EFRNORM , 0);	
		//Boost and SpeedBrakes (SPD, Throttle)
			// SPDB Key
				//With Paddle (Break) //Without Paddle (Boost)
				MapKeyIO(&Throttle, SPDB, TEMPO(Movement_Break, CHAIN(Movement_Break,Movement_Boost), Emergency_Breaks_Timer), Movement_Boost);
			// SPDF Key 
				//With Paddle (Emergency Break) //Without Paddle (AfterBurner)
				MapKeyIO(&Throttle, SPDF, CHAIN(Movement_Boost, Movement_Break), Movement_Afterburner);
		//ENG OPER (IGN used, MOTOR Free)
			// EORIGN Lights Toggle
				MapKey(&Throttle, EORIGN, SEQ(CHAIN(PULSE + Systems_Toggle_Lights , PULSE + LED(&Throttle, LED_INTENSITY, 0)) , CHAIN(PULSE + Systems_Toggle_Lights , PULSE + LED(&Throttle, LED_INTENSITY, LED_Level))));
			// EOLIGN Radar Range Toggle
				MapKey(&Throttle, EOLIGN, PULSE+Systems_Radar_Range);
		//APU 
			//on/off toggles suicide mode (self destruct)
				MapKey(&Throttle, APUON, EXEC("ActKey(KEYON + Flight_Self_Destruct);DeferCall(2000, &ActKey, Flight_Self_Destruct);"));
				MapKey(&Throttle, APUOFF, EXEC("ActKey(KEYON + Flight_Self_Destruct);DeferCall(2000, &ActKey, Flight_Self_Destruct);"));
		//LEDs
			// Power On
				// initialize LED lighting
				ActKey(PULSE+LED(&Throttle, LED_INTENSITY, LED_Level));
				ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1)); //set LED 1 ON, as Weapon Group 1 default
				ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2)); //set LED 2 OFF
				ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3)); //set LED 3 OFF
				ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4)); //set LED 4 OFF
				ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED5)); //set LED 5 OFF
			// LED 3-5 help to identify deadzone for Left Throttle (all LEDs will be OFF when Left Throttle is on IDLE)
				KeyAxis(&Throttle, THR_LEFT, 0, AXMAP2(7,
					//1
					CHAIN
					(
						PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED3),
						PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4),
						PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED5)
					),
					//2
					CHAIN
					(
						PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3),
						PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4),
						PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED5)
					),
					//3
					CHAIN
					(
						PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3),
						PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4),
						PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED5)
					),
					//4
					CHAIN
					(
						PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3),
						PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4),
						PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED5)
					),
					//5
					CHAIN
					(
						PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3),
						PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4),
						PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED5)
					),
					//6
					CHAIN
					(
						PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3),
						PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4),
						PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED5)
					),
					//7
					CHAIN
					(
						PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED3),
						PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4),
						PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED5)
					)
						));
	//Joystick Mappings
		//Hat 4 (Thumb switch CMS?)
			// H4 Up
				MapKeyIOUMD(&Joystick, H4U, 
				//FLAPS UP (MFD/HUD Interaction Mode) and Paddle
					0,
				//FLAPS UP (MFD/HUD Interaction Mode) 
					PULSE + HUD_Up,
				//Flaps MVR (Flight mode) and Paddle
					Shields_Transfer_Forward,
				//Flaps MVR (Flight mode)
					PULSE + View_Zoom_In,
				//Flaps DN (Camera Director Mode) and Paddle
					0,
				//Flaps DN (Camera Director Mode)
					Camera_Target_Offset_Up);
			// H4 Left
				MapKeyIOUMD(&Joystick, H4L, 
				//FLAPS UP (MFD/HUD Interaction Mode) and Paddle
					0,
				//Flaps UP
					PULSE + HUD_Left,
				//Flaps MVR (Flight mode) and Paddle
					EXEC("CMChaff();"),
				//Flaps MVR (Flight mode)
					Weapons_Countermeasure_Change,
				//Flaps DN (Camera Director Mode) and Paddle
					0,
				//Flaps DN (Camera Director Mode)
					Camera_Target_Offset_Left);
			// H4 Right
				MapKeyIOUMD(&Joystick, H4R, 
				//FLAPS UP (MFD/HUD Interaction Mode) and Paddle
					0,
				//FLAPS UP (MFD/HUD Interaction Mode) 
					PULSE + HUD_Right,
				//Flaps MVR (Flight mode) and Paddle
					EXEC("CMFlare();"),
				//Flaps MVR (Flight mode)
					Weapons_Countermeasure_Launch,
				//Flaps DN (Camera Director Mode) and Paddle
					0,
				//Flaps DN (Camera Director Mode)
					Camera_Target_Offset_Right);
			// H4 Down
				MapKeyIOUMD(&Joystick, H4D, 
				//FLAPS UP (MFD/HUD Interaction Mode) and Paddle
					0,
				//FLAPS UP (MFD/HUD Interaction Mode) 
					PULSE + HUD_Down,
				//Flaps MVR (Flight mode) and Paddle
					Shields_Transfer_Backward,
					//Flare Flare Flare 
				//Flaps MVR (Flight mode)
					PULSE + View_Zoom_Out,
				//Flaps DN (Camera Director Mode) and Paddle
					0,
				//Flaps DN (Camera Director Mode)
					Camera_Target_Offset_Down);
			// H4 Press
				MapKeyIOUMD(&Joystick, H4P, 
				//FLAPS UP (MFD/HUD Interaction Mode) and Paddle
					PULSE + HUD_Select,
				//FLAPS UP (MFD/HUD Interaction Mode) 
					PULSE + HUD_Accept,
				//Flaps MVR (Flight mode) and Paddle
					PULSE + Shields_Reset,
				//Flaps MVR (Flight mode)
					PULSE + Systems_Power_Reset,
				//Flaps DN (Camera Director Mode) and Paddle
					0,
				//Flaps DN (Camera Director Mode)
					Camera_Reset_Previous_View);
		//DMS 
			// DMS Up
				MapKeyIOUMD(&Joystick, H3U, 
				//FLAPS UP (MFD/HUD Interaction Mode) and Paddle
					0,
				//FLAPS UP (MFD/HUD Interaction Mode) 
					PULSE + HUD_MFD_Up,
				//Flaps MVR (Flight mode) and Paddle
					Shields_Transfer_Top,
				//Flaps MVR (Flight mode)
					Shields_Transfer_Forward,
				//Flaps DN (Camera Director Mode) and Paddle
					Camera_Zoom_In,
				//Flaps DN (Camera Director Mode)
					Camera_Strafe_Up);
			// DMS Left
				MapKeyIOUMD(&Joystick, H3L, 
				//FLAPS UP (MFD/HUD Interaction Mode) and Paddle
					PULSE + HUD_Screen_Left,
				//FLAPS UP (MFD/HUD Interaction Mode)
					PULSE + HUD_MFD_Left,
				//Flaps MVR (Flight mode) and Paddle
					Systems_Cooler_Decrease_Rate,
				//Flaps MVR (Flight mode)
					Shields_Transfer_Left,
				//Flaps DN (Camera Director Mode) and Paddle
					Camera_Background_Blur_Decrease,
				//Flaps DN (Camera Director Mode)
					Camera_DoF_Decrease);
			// DMS Right
				MapKeyIOUMD(&Joystick, H3R, 
				//FLAPS UP (MFD/HUD Interaction Mode) and Paddle
					PULSE + HUD_Screen_Right,
				//FLAPS UP (MFD/HUD Interaction Mode)
					PULSE + HUD_MFD_Right,
				//Flaps MVR (Flight mode) and Paddle
					Systems_Cooler_Increase_Rate,
				//Flaps MVR (Flight mode)
					Shields_Transfer_Right,
				//Flaps DN (Camera Director Mode) and Paddle
					Camera_Background_Blur_Increase,
				//Flaps DN (Camera Director Mode)
					Camera_DoF_Increase);
			// DMS Down
				MapKeyIOUMD(&Joystick, H3D,
				//FLAPS UP (MFD/HUD Interaction Mode) and Paddle
					0,
				//FLAPS UP (MFD/HUD Interaction Mode) 
					PULSE + HUD_MFD_Down,
				//Flaps MVR (Flight mode) and Paddle
					Shields_Transfer_Bottom,
				//Flaps MVR (Flight mode)
					Shields_Transfer_Backward,
				//Flaps DN (Camera Director Mode) and Paddle
					Camera_Zoom_Out,
				//Flaps DN (Camera Director Mode)
					Camera_Strafe_Down);		
		//TMS
			// Targeting controlled by TMS
			// UP Target Reticle (Pin Target) / Cycle Pinned
				MapKeyIO(&Joystick, H2U, PULSE + Targeting_Cycle_Pinned_Target, TEMPO(Targeting_Focus_Reticle, PULSE + Targeting_Pin_Target, Targeting_Hold_Timer));
			// DOWN Target Nearest Hostile (Pin Target) / Cycle Pinned Back
				MapKeyIO(&Joystick, H2D, PULSE + Targeting_Cycle_Back_Pinned_Target, TEMPO(Targeting_Nearest_Hostile, PULSE + Targeting_Pin_Target, Targeting_Hold_Timer));
			// RIGHT Cycle Hostile / Cycle Friendly
				MapKeyIO(&Joystick, H2R, PULSE + Targeting_Cycle_Friendly, PULSE + Targeting_Cycle_Hostile);
			// LEFT Cycle Hostile Back / Cycle Friendly Back
				MapKeyIO(&Joystick, H2L, PULSE + Targeting_Cycle_Back_Friendly, PULSE + Targeting_Cycle_Back_Hostile);		
		//Triger Button
			// TG1 Fires Weapon Group 1
				MapKey(&Joystick, TG1, Weapons_Fire_G1);	// Fire weapon group '1' or '2'
			// TG2 fires Weapon Groups 1+2+3+4
				MapKey(&Joystick, TG2, CHAIN(Weapons_Fire_G1, Weapons_Fire_G2, Weapons_Fire_G3, Weapons_Fire_G4));
		//S1 cylces between Weapon Groups 1 - 4 for TG1, along with LEDs 1 & 2
			// LEDs 1 & 2 will help you identify the selected weapon group
				MapKey(&Joystick, S1, SEQ(
						CHAIN(
						// LED 1 OFF, LED 2 ON: Weapon Group 2
						EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1+LED2));"),
						EXEC("MapKey(&Joystick, TG1, Weapons_Fire_G2);")),
						CHAIN(
						// LED 1 ON, LED 2 ON: Weapon Group 3
						EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1+LED2));"),
						EXEC("MapKey(&Joystick, TG1, Weapons_Fire_G3);")),
						CHAIN(
						// LED 1 OFF, LED 2 OFF: Weapon Group 4
						EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1-LED2));"),
						EXEC("MapKey(&Joystick, TG1, Weapons_Fire_G4);")),
						CHAIN(
						// LED 1 ON, LED 2 OFF: Weapon Group 1
						EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1-LED2));"),
						EXEC("MapKey(&Joystick, TG1, Weapons_Fire_G1);"))
						));
		//S2 Missile Control
			//S2 with paddle lock missile, hold to lock another. without paddle fire missile(s)
					MapKeyIO(&Joystick, S2, TEMPO(PULSE + Weapons_Lock_Missile, PULSE + Weapons_Lock_Missile, Lock_Multiple_Missiles_Timer), Weapons_Missile);
		//Hat 1	(trim)
			//UP: Toggle Gimble Lock
				MapKeyIO(&Joystick, H1U, View_Look_Up, Weapons_Gimble_Lock);
			//DOWN: Toggle Reticle mode
				MapKeyIO(&Joystick, H1D, View_Look_Down, Weapons_Reticle_Mode);
			//RIGHT: Transfer power to Weapons (pew pew)
				MapKeyIO(&Joystick, H1R, View_Look_Right, TEMPO(PULSE + Systems_Power_Weapons, PULSE + Systems_Power_Weapons,Power_Distribution_Timer));
			//LEFT: Transfer power to Shields and Avionics (GTFO mode)
				MapKeyIO(&Joystick, H1L, View_Look_Left, TEMPO(CHAIN(PULSE + Systems_Power_Shields, PULSE + Systems_Power_Engines),CHAIN(PULSE + Systems_Power_Shields, PULSE + Systems_Power_Engines),Power_Distribution_Timer));
		//S3 Pinky button on stick
			// S3
				MapKeyIOUMD(&Joystick, S3,
				//FLAPS UP (MFD/HUD Interaction Mode) and Paddle
					0,
				//FLAPS UP (MFD/HUD Interaction Mode) 
					PULSE + HUD_Cancel,
				//Flaps MVR (Flight mode) and Paddle
					0,
				//Flaps MVR (Flight mode)
					View_Look_Behind,
				//Flaps DN (Camera Director Mode) and Paddle
					0,
				//Flaps DN (Camera Director Mode)
					Camera_Toggle_Orbit_Cam);	
		//S4 Paddle (S4 used as IO switch for all other buttons)
			// make sure nothing happens when pressing paddle alone
				MapKey (&Joystick, S4, 0);
	} // End of Warthog HOTAS config
	//.Warthog HOTAS Initialization
//Dual TM16000 Initialization
	if (Controller_TM16000_DualStick==1)
		{
		// Axis Assignment - Rotation Axis
			// X Axis - Yaw
				//TM16000 Right - Stick Left/Right
				MapAxis(&right, JOYX, DX_X_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
			// Y Axis - Pitch	
				//TM16000 Right - Stick Forwards/Backwards
				MapAxis(&right, JOYY, DX_Y_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
			// Z Axis - Roll
				//TM16000 Right - Rudder Twist
				MapAxis(&right, RUDDER, DX_Z_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
		// Axis Assignment - Translation Axis
			// XROT Axis - Strafe Left / Right
				//TM16000 Left - Stick Left/Right
				MapAxis(&left, JOYX, DX_XROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
			// YROT Axis - Strafe Forwards / Backwards
				//TM16000 Left - Stick Forwards/Backwards
				MapAxis(&left, JOYY, DX_YROT_AXIS, AXIS_REVERSED, MAP_ABSOLUTE);
			// ZROT Axis - Strafe Up / Down
				//TM16000 Left - Rudder Twist
				MapAxis(&left, RUDDER, DX_ZROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
		// Axis Assignement - Throttle Axis and Slider Axis
			// THROTTLE Axis - Throttle 0-100
				//TM16000 Left - Throttle
				MapAxis(&left, THR, DX_THROTTLE_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
			// SLIDER Axis - Dynamic Zoom In/Out
				//TM16000 Right - Throttle
				MapAxis(&right, THR, DX_SLIDER_AXIS, AXIS_REVERSED, MAP_ABSOLUTE);
		//Select Shift Key
			//Makes the Left Stick Trigger the Shift layer trigger
			if(Controller_Warthog_HOTAS==1)
			{
				//disabling Shift on Dualsticks if you have Warthog HOTAS also selected
				//SetShiftButton(&left, TS1);
			} else {SetShiftButton(&left, TS1);}
		// Left Stick Button Mapping
			// make sure nothing happens when pressing left trigger alone
				MapKey (&left, TS1, 0); // remember: //Map_IO (Shift,noShift)
			//TS2: 
				MapKey (&left, TS2, CHAIN(Movement_Break,Movement_Boost));
			//TS3: Brake  
				MapKey (&left, TS3, TEMPO(PULSE + Weapons_Countermeasure_Launch, PULSE + Weapons_Countermeasure_Change, Countermeasure_Hold_to_ChangeCM_Timer));
			//TS4: 
				MapKey (&left, TS4, PULSE + Systems_IFCS_GSafe);
			//Hat
				MapKeyIO (&left, H1U, TEMPO(PULSE + Shields_Transfer_Forward,View_Zoom_In,Zoom_Timer), TEMPO(PULSE + Systems_Power_Reset, PULSE + Shields_Reset, Power_Distribution_Reset_Hold_Timer));
				MapKeyIO (&left, H1R, TEMPO(PULSE + Shields_Transfer_Right,EXEC ("Free_Look_Toggle();"),Free_Look_Mode_Toggle_Timer), TEMPO(PULSE + Systems_Power_Weapons, PULSE + Systems_Power_Weapons,Power_Distribution_Timer));
				MapKeyIO (&left, H1D, TEMPO(PULSE + Shields_Transfer_Backward, View_Zoom_Out,Zoom_Timer), View_Look_Behind);
				MapKeyIO (&left, H1L, TEMPO(PULSE + Shields_Transfer_Left,EXEC ("Free_Look_Toggle();"),Free_Look_Mode_Toggle_Timer), TEMPO(CHAIN(PULSE + Systems_Power_Shields, PULSE + Systems_Power_Engines),CHAIN(PULSE + Systems_Power_Shields, PULSE + Systems_Power_Engines),Power_Distribution_Timer));
			//B5-7
				MapKey (&left, B5, PULSE + Systems_Toggle_Lights);
				MapKey (&left, B6, PULSE + Flight_Ready_Mode);
				MapKey (&left, B7, TEMPO(PULSE + Flight_Landing_Mode, Flight_Auto_Land, Auto_Land_Hold_Timer));
			//B8-10
				MapKey (&left, B8, TEMPO (EXEC ("Combat_Mode();"), EXEC ("Sensitivity_Mode();"), Flight_Mode_Change_Timer));
				MapKey (&left, B9, EXEC ("Precision_Mode();"));
				MapKey (&left, B10, EXEC ("Agility_Mode();"));
			//B11-13
				MapKeyIO (&left, B11, TEMPO(0, PULSE + Flight_Eject, Eject_Hold_Timer), PULSE + Systems_Toggle_Weapons);
				MapKeyIO (&left, B12, TEMPO(0, EXEC("ActKey(KEYON + Flight_Self_Destruct);DeferCall(2000, &ActKey, Flight_Self_Destruct);")), PULSE + Systems_Toggle_Shields);
				MapKey (&left, B13, PULSE + Systems_Toggle_Engines);
			//B14-16
				MapKey (&left, B14, TEMPO(SEQ(EXEC ("AR_Mode_Engage();"), EXEC ("AR_Mode_Disengage();")), Flight_Match_Target_Velocity, AR_Mode_Timer));
				MapKeyIO (&left, B15, PULSE + View_Chat, PULSE + View_Mobiglass);
				MapKeyIO (&left, B16, PULSE + View_Contacts, PULSE + Flight_QD_Engage);
		// Right Stick Button Mapping
			// TS1: fire G1, fire G1-4 with shift (left trigger)
				MapKeyIO(&right, TS1, CHAIN(Weapons_Fire_G1, Weapons_Fire_G2, Weapons_Fire_G3, Weapons_Fire_G4), Weapons_Fire_G1); //trigger
			// TS2: Lock/Fire Missiles, Cycle Weapon Groups 1-4 for main trigger (with Shift)
				MapKeyIO(&right, TS2, TEMPO (PULSE+Weapons_Lock_Missile,PULSE+Weapons_Lock_Missile,Lock_Multiple_Missiles_Timer), Weapons_Missile);
			// TS3 (left button) Afterburner
				MapKey (&right, TS3, Movement_Afterburner);
			// TS4 (right button) GSafe
				MapKey (&right, TS4, Voice_Comms_PPT);
			//Hat  Targeting_Cycle_Friendly
				MapKeyIO (&right, H1U, View_Look_Up, TEMPO(Targeting_Focus_Reticle	, PULSE + Targeting_Pin_Target, Targeting_Hold_Timer));
				MapKeyIO (&right, H1R, View_Look_Right, TEMPO(Targeting_Cycle_Hostile, PULSE + Targeting_Cycle_Friendly, Targeting_Hold_Timer));
				MapKeyIO (&right, H1D, View_Look_Down, TEMPO(Targeting_Nearest_Hostile, PULSE + Targeting_Cycle_Pinned_Target, Targeting_Hold_Timer));
				MapKeyIO (&right, H1L, View_Look_Left, TEMPO(Targeting_Cycle_Back_Hostile, PULSE + Targeting_Cycle_Back_Friendly, Targeting_Hold_Timer));
			//B5-7
				MapKey (&right, B5, 0);
				MapKey (&right, B6, 0);
				MapKey (&right, B7, PULSE + Systems_Radar_Range);
			//B8-10
				MapKeyIO (&right, B8, CHAIN(View_Look_Ahead, D(), View_Center_HeadTracking), PULSE + Systems_IFCS_Decouple);
				MapKeyIO (&right, B9, PULSE + View_TrackIR_Precision, PULSE + Systems_IFCS_COMSTAB);
				MapKey (&right, B10, PULSE + Systems_IFCS_ESP_Toggle);
			//B11-13
				MapKey (&right, B11, SEQ(
					//I leave room here to configure the LEDs on the sticks to light up to help identify selected weapon group
						//CHAIN(
						//EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1+LED2));"),
					EXEC("MapKeyIO(&right, TS1, CHAIN(Weapons_Fire_G1, Weapons_Fire_G2, Weapons_Fire_G3, Weapons_Fire_G4), Weapons_Fire_G2);")
						//)
					,
						//CHAIN(
						//EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1+LED2));"),
					EXEC("MapKeyIO(&right, TS1, CHAIN(Weapons_Fire_G1, Weapons_Fire_G2, Weapons_Fire_G3, Weapons_Fire_G4), Weapons_Fire_G3);")
						//)
					,
						//CHAIN(
						//EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1-LED2));"),
					EXEC("MapKeyIO(&right, TS1, CHAIN(Weapons_Fire_G1, Weapons_Fire_G2, Weapons_Fire_G3, Weapons_Fire_G4), Weapons_Fire_G4);")
						//)
					,
						//CHAIN(
						//EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1-LED2));"),
					EXEC("MapKeyIO(&right, TS1, CHAIN(Weapons_Fire_G1, Weapons_Fire_G2, Weapons_Fire_G3, Weapons_Fire_G4), Weapons_Fire_G1);")
						//)
					));
				MapKeyIO (&right, B12,PULSE + WTF_BUG, PULSE + Weapons_Reticle_Mode);
				MapKeyIO (&right, B13, EXEC ("Swap_Roll_Yaw();"),PULSE + Weapons_Gimble_Lock);
			//B14-16
				MapKey (&right, B14, PULSE + View_Switch);
				MapKey (&right, B15, 0);
				MapKey (&right, B16, 0);
		} //end of TM16000 Dual Stick config
	//.Dual TM16000 Initialization
//Rudder Pedals Initialization
	if (Controller_TMFR_Pedals==1)
	{
		///////// RUDDER Roll and virtual STRAFEAXIS initialization
		//Axis Assignment - Translation Axis
		// Z Axis - Roll
			//TRUDDER - Pedals R/L Twist
				MapAxis(&TFRPRudder, TRUDDER, DX_Z_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
		//Axis Assignment - Translation Axis
		// XROT Axis - Strafe Left / Right
			//TRUDDER - Left/Right Pedals
				//XROT axis is not assigned here, instead assigned on the EventHandler section. This is done so we can assign custom curves to the combined axis.
				MapAxis(&TFRPRudder, TRPRIGHT, 0, AXIS_NORMAL, MAP_ABSOLUTE);
				MapAxis(&TFRPRudder, TRPLEFT, 0, AXIS_NORMAL, MAP_ABSOLUTE);
	} // end of TMFR Pedals config
	//.Rudder Pedals Initialization
	if (Controller_Warthog_HOTAS==1 & Controller_TM16000_DualStick==1 & Controller_TMFR_Pedals==1)
		{
			if (Controller_Sofa==1)
			{
				SetShiftButton(&left, TS1);
				//Roll_Yaw_Swapped=1;
			} else
				{
					SetShiftButton(&Joystick, S4, &Throttle, FLAPU, FLAPD);
					//Roll_Yaw_Swapped=1;
				}
		}
	if (Controller_Swap_Roll_Yaw==1)
		{
			if (Controller_TMFR_Pedals==1 & Controller_Warthog_HOTAS==1)
			{
			MapAxis(&Joystick, JOYX, DX_Z_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
			MapAxis(&TFRPRudder, TRUDDER, DX_X_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
			}
		}
	//		if (Controller_TMFR_Pedals==1)
	//		{
	//			//TRUDDER - Pedals R/L Twist
	//			MapAxis(&TFRPRudder, TRUDDER, DX_Z_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	//		}else 
	//			{
	//			MapAxis(&Throttle, SCX, DX_Z_AXIS, AXIS_NORMAL, MAP_RELATIVE);
	//			}
	//	} else
	//		{
	//		 MapAxis(&Joystick, JOYX, DX_X_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	//		}
} //end of Main Initialization
	//.Main Initialization
//Event Handler Initialization
int EventHandle(int type, alias o, int x)
{
	//////////Default Event Handler
	DefaultMapping(&o, x);
	/////////If using the TM Rudder Pedals
	if (Controller_TMFR_Pedals==1)
	{
		//Then pickup all input from this device
		if (&o == &TFRPRudder) 
		{  
			// Get the position of the axis
			GetAxisData(&o, x);
			// only if any of the 2 pedals are pressed down
			if(x == TRPLEFT | x == TRPRIGHT) 
			{ 
				// create a new virtual axis called STRAFEAXIS that will take the combined input of the two physical positions. Note that we divide by 2 so the resulting axis has the same range as all the other axis. We take the value from the AxisVal function to get the applied Advanced Flight modes that control deadzones, curves etc while still combining everything into 1 TM Combined DirectX device.
				STRAFEAXIS = -AxisVal(TFRPRudder[TRPRIGHT], &axdata)/2 + AxisVal(TFRPRudder[TRPLEFT], &axdata)/2;
				// now we map the X Rotational axis that's used for Strafe-R/L within SC to this virtual axis.
				DXAxis(DX_XROT_AXIS, STRAFEAXIS);
			}  
		} 
	} 
}//end of TMFR Pedals config with EventHandler
	//.Event Handler Initialization
//*****************************************************************************************************************
// End of File
// qp
// .
//*****************************************************************************************************************