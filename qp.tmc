//*****************************************************************************************************************
//	STAR CITIZEN TARGET Profile
//		Supports the below combinations of Thrustmaster products:
//		- Thrustmaster Warthog HOTAS (Fully Supported)
//		- Thrustmaster FCS HOTAS (WIP)
//		- Thrustmaster TM16000 Dual sticks (Supported)
//		- Thrustmaster Warthog Dual sticks (WIP)
//		- Thrustmaster Rudder Pedals (Supported)
//		- Thrustmaster MFDs (WIP)
//		- Right Stick (Warthog or TM16000) with Keyboard (WIP)
//		- Left Stick (Warthog or TM16000) with Mouse (WIP)
//		
//	Written by qp
// 		https://robertsspaceindustries.com/citizens/q-p
//
//*****************************************************************************************************************
//*****************************************************************************************************************
//DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT YOU ARE DOING!
//USER-CUSTOMISABLE SETTINGS ARE IN qp_settings.tmh file
//*****************************************************************************************************************

	// 0.1 Initialize Variables & Options
		// Include basic TARGET instructions
		include "target.tmh"
		// Include user customizable settings
		include "qp_settings.tmh"
		// Include custom bindings and keyboard mappings
		include "qp_mapping.ttm"
		// Include custom scripts and routines
		include "qp_engine.tmh"
		
	// 0.2 custom flags
		// create a flag to track countermeasures
		char countermeasure;
		// create a flag to track Flight Mode
		char Flight_Mode;
		// create a flag to track Ship and FPS lights
		char Lights_Ship;
		char Lights_FPS;
		
	// 0.3 TM16000FCS L/R Setup
		alias left;
		alias right;

// 1.0 Main Initialization
int main()
{	
	Configure(&HCougar, MODE_EXCLUDED);
	if (Controller_TM16000_DualStick==0)
	{
		Configure(&T16000, MODE_EXCLUDED);
		Configure(&T16000L, MODE_EXCLUDED);
	}
	if (Controller_Warthog_HOTAS==0)
	{
		Configure(&Joystick, MODE_EXCLUDED);
		Configure(&Throttle, MODE_EXCLUDED);
	}
	if (Controller_TM_MFDs==0)
	{
		Configure(&LMFD, MODE_EXCLUDED);
		Configure(&RMFD, MODE_EXCLUDED);
	}
	if (Controller_TM16000_FCSHOTAS==0)
	{
		Configure(&TWCSThrottle, MODE_EXCLUDED);
	}
	if (Controller_TMFR_Pedals==0)
	{
		Configure(&TFRPRudder, MODE_EXCLUDED);
	} else 
	{
		//Configure(&TFRPRudder, MODE_FILTERED);
	}
	// Set repeat delay for keyboard commands
	SetKBRate(25, 60);
	//keyboard language
	SetKBLayout(KB_ENG);
	// declare the event handler, return on error
	if(Init(&EventHandle)) return 1; 

	// 1.1 Axis Assignment - Rotation Axis
	//DirectX gives us 8 total Axis to play with
	//So we'll use 6 degrees of freedom mapped to first 6 axis and also Throttle and Slider axis
	// https://en.wikipedia.org/wiki/Six_degrees_of_freedom
	// https://en.wikipedia.org/wiki/Aircraft_principal_axes
		// X - Turn Left/Right (Yaw)
		// Y - Rotate Forwards/Backwards (Pitch)
		// Z - Rotate Left/Right (Roll)
		// XROT - Move Left/Right (Sway)
		// YROT - Move Forwards/Backwards (Surge)
		// ZROT - Move Up/Down (Heave)
		// SLIDER - Controls Zoom in-out
		// THROTTLE - Controls Throttle 0-100

	//Initialize Dual Sticks alias for easier reference
		&right = &T16000;
		&left = &T16000L;
	
		// 1.5 Custom Functions Initialization 
			//declare starting countermeasure=flare, change to 0 for chaff
			countermeasure=1;
			
			//is this actually working???
	
///////// Warthog HOTAS 

	if (Controller_Warthog_HOTAS==1)
	{

	// X Axis - Yaw
		//Warthog Stick - Stick Left/Right
		MapAxis(&Joystick, JOYX, DX_X_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
		//TM16000 Right - Stick Left/Right
		MapAxis(&right, JOYX, DX_X_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	// Y Axis - Pitch	
		//Warthog Stick - Stick Forwards/Backwards
		MapAxis(&Joystick, JOYY, DX_Y_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
		//TM16000 Right - Stick Forwards/Backwards
		MapAxis(&right, JOYY, DX_Y_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	// Z Axis - Roll
		//TRUDDER - Pedals R/L Twist
		MapAxis(&TFRPRudder, TRUDDER, DX_Z_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
		//TM16000 Right - Rudder Twist
		MapAxis(&right, RUDDER, DX_Z_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);

	// 1.2 Axis Assignment - Translation Axis
		// XROT Axis - Strafe Left / Right
			//TRUDDER - Left/Right Pedals
				//XROT axis is not assigned here, instead assigned on the EventHandler section. This is done so we can assign custom curves to the combined axis.
			MapAxis(&TFRPRudder, TRPRIGHT, 0, AXIS_NORMAL, MAP_ABSOLUTE);
			MapAxis(&TFRPRudder, TRPLEFT, 0, AXIS_NORMAL, MAP_ABSOLUTE);
			//TM16000 Left - Stick Left/Right
			MapAxis(&left, JOYX, DX_XROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
		// YROT Axis - Strafe Forwards / Backwards
			//Warthog Throttle - Right Engine Throttle
				//Not mapped initially as we're mapping this when selected with boat switch
			//TM16000 Left - Stick Forwards/Backwards
			MapAxis(&left, JOYY, DX_YROT_AXIS, AXIS_REVERSED, MAP_ABSOLUTE);
		// ZROT Axis - Strafe Up / Down
			//Warthog Throttle - Left Engine Throttle
			MapAxis(&Throttle, THR_LEFT, DX_ZROT_AXIS, AXIS_REVERSED, MAP_ABSOLUTE);
			//TM16000 Left - Rudder Twist
			MapAxis(&left, RUDDER, DX_ZROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	
	// 1.3 Axis Assignement - Throttle Axis and Slider Axis
		// THROTTLE Axis - Throttle 0-100
			//Warthog Throttle - Right Engine Throttle
			MapAxis(&Throttle, THR_RIGHT, DX_THROTTLE_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
			//TM16000 Left - Throttle
			MapAxis(&left, THR, DX_THROTTLE_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
		// SLIDER Axis - Dynamic Zoom In/Out
			//Warthog Throttle
			MapAxis(&Throttle, THR_FC, DX_SLIDER_AXIS, AXIS_REVERSED, MAP_ABSOLUTE);
			//TM16000 Right - Throttle
			MapAxis(&right, THR, DX_SLIDER_AXIS, AXIS_REVERSED, MAP_ABSOLUTE);

	// 1.3 Center Joystick Rotation
				// Center-Mounted Stick rotation
				//RotateDXAxis(DX_X_AXIS, DX_Y_AXIS, Stick_Rotation);
				//not used by default (Center stick rotation affects all pitch/roll input controls)

			// 1.3 Mouse Use on Warthog Throttle (slew control)
			//	MapAxis(&Throttle, SCX, MOUSE_X_AXIS, AXIS_NORMAL, MAP_RELATIVE);
			//	MapAxis(&Throttle, SCY, MOUSE_Y_AXIS, AXIS_NORMAL, MAP_RELATIVE);


			//	SetSCurve(&Throttle, SCX, 0, Mouse_Deadzone/2, 0, Mouse_Curve, Mouse_Scale);
			//	SetSCurve(&Throttle, SCY, 0, Mouse_Deadzone, 0, Mouse_Curve, Mouse_Scale);


		// 1.6 Shift State (I/O) and Layers (U/M/D)
				// IO Shift is Joystick Paddle (S4) 
					// Paddle will be used with various keys to give you quick access to more commmands
				// UMD Layer selector is FLAPS
					// FLAPS switch will reflect what control scheme is active for the Warthog HOTAS (WIP)
					// UP for when you are in Augmented Reality Mode (new in 3.0)
					// MVR for when you are in flight, combat or otherwise
					// DN when you are in Camera Director Mode
		SetShiftButton(&Joystick, S4, &Throttle, FLAPU, FLAPD);

		// 2.0 Throttle Mappings
			
			//2.5 FLAPS
				// Flaps when moved Forward (UP) will enter Augemented Reality mode (interaction mode)
				MapKey(&Throttle, FLAPU, EXEC ("HUD_Mode_Engage();"));
				MapKeyR(&Throttle, FLAPU, EXEC ("HUD_Mode_Disengage();"));
				// for flaps down to control Camera Director mode: http://scfocus.org/camera-controls/
				MapKey(&Throttle, FLAPD, DOWN + View_Switch);
				MapKeyR(&Throttle, FLAPD, UP + View_Switch);
			
			// 2.2 Coolie Switch (CS)
				// LEFT
				MapKeyIOUMD(&Throttle, CSL, 
					//FLAPS UP (MFD/HUD Interaction Mode) (MFD/HUD Customize Mode) and Paddle
				0,
					//FLAPS UP (MFD/HUD Interaction Mode) (MFD/HUD Customize Mode)
				0,
					//Flaps MVR (Flight mode) and Paddle
				Movement_Roll_Right,
					//Flaps MVR (Flight mode)
				Movement_Strafe_Left,
					//Flaps DN (Camera Director Mode) and Paddle
				0,
					//Flaps DN (Camera Director Mode)
				0);
				// RIGHT
				MapKeyIOUMD(&Throttle, CSR, 
					//FLAPS UP (MFD/HUD Interaction Mode) (MFD/HUD Customize Mode) and Paddle
				0,
					//FLAPS UP (MFD/HUD Interaction Mode) (MFD/HUD Customize Mode)
				0,
					//Flaps MVR (Flight mode) and Paddle
				Movement_Roll_Right,
					//Flaps MVR (Flight mode)
				Movement_Strafe_Right,
					//Flaps DN (Camera Director Mode) and Paddle
				0,
					//Flaps DN (Camera Director Mode)
				0);
				// UP
				MapKeyIOUMD(&Throttle, CSU, 
					//FLAPS UP (MFD/HUD Interaction Mode) (MFD/HUD Customize Mode) and Paddle
				0,
					//FLAPS UP (MFD/HUD Interaction Mode) (MFD/HUD Customize Mode)
				0,
					//Flaps MVR (Flight mode) and Paddle
				Movement_Strafe_Forward,
					//Flaps MVR (Flight mode)
				Movement_Strafe_Up,
					//Flaps DN (Camera Director Mode) and Paddle
				0,
					//Flaps DN (Camera Director Mode)
				0);
				// DOWN
				MapKeyIOUMD(&Throttle, CSD, 
					//FLAPS UP (MFD/HUD Interaction Mode) (MFD/HUD Customize Mode) and Paddle
				0,
					//FLAPS UP (MFD/HUD Interaction Mode) (MFD/HUD Customize Mode)
				0,
					//Flaps MVR (Flight mode) and Paddle
				Movement_Strafe_Backward,
					//Flaps MVR (Flight mode)
				Movement_Strafe_Down,
					//Flaps DN (Camera Director Mode) and Paddle
				0,
					//Flaps DN (Camera Director Mode)
				0);

			//2.2 Throttle Thumb button (MS) ****

				// Throttle Thumb (MS) changes HUD Tab and controls Top/Bottom Shields as well as Voice Commms PPT and scoreboard/mobiglass, scan mode
						// UP: HUD Screen Left			Transfer Shields Top
					MapKeyIO(&Throttle, MSU, PULSE + HUD_Screen_Left , EXEC("DoShields(Shields_Transfer_Top);"));
					MapKeyRIO(&Throttle, MSU, 0, EXEC("ActKey(Shields_Transfer_Top);"));// DeferCall(HUD_Response_Timer, &OnHUDCallback, 0);"));
						// DOWN: HUD Screen Right 		Transfer Shields Bottom
					MapKeyIO(&Throttle, MSD, PULSE + HUD_Screen_Right, EXEC("DoShields(Shields_Transfer_Bottom);"));
					MapKeyRIO(&Throttle, MSD, 0, EXEC("ActKey(Shields_Transfer_Bottom);"));//DeferCall(HUD_Response_Timer, &OnHUDCallback, 0);"));
						// PRESS: HUD Cancel		Reset Power
					MapKeyIO(&Throttle, MSP, PULSE + HUD_Cancel, PULSE + Systems_Power_Reset);
						// LEFT: Push-To-Talk (no paddle), HotMic toggle (with Paddle) - this will turn on SCRLOCK LED on Keyboard when you are talking
					MapKeyIO(&Throttle, MSL, KEYON+DOWN+Voice_Comms_PPT, Voice_Comms_PPT);
					MapKeyRIO(&Throttle, MSL,  0, PULSE + Voice_Comms_PPT);
						// RIGHT: Toggle Mobiglass (no paddle), Toggle New AR mode (with Paddle)
					MapKeyIO(&Throttle, MSR, View_ARMode, View_Mobiglass);
					// MapKeyRIO(&Throttle, MSR, 0, 0);
						// PRESS: Scan Mode (press) Scan Active Ping (hold)
					MapKeyIO(&Throttle, MSP, 0, Targeting_Scan_Mode);
				
			//2.3 RDR Free ***
					// RDRDIS
					// RDRNRM
					MapKey(&Throttle, RDRDIS, 0);
					MapKey(&Throttle, RDRNRM, 0);
				
			//2.4 EACON Free ****
					// FLAPS UP: Power to Weapons Toggle, FLAPS MV: Power to Shields Toggle, FLAPS DN: Power to Avionics Toggle
						// EAC Switch Toggles System On/Off depending on the position of the FLAPs switch
					// **** below needs to change
					//MapKeyUMD(&Throttle, EACON, PULSE + Systems_Toggle_Weapons, PULSE + Systems_Toggle_Shields, PULSE + Systems_Toggle_Engines);
					//MapKeyUMD(&Throttle, EACOFF, PULSE + Systems_Toggle_Weapons, PULSE + Systems_Toggle_Shields, PULSE + Systems_Toggle_Engines);
					
			//2.6 Travel Mode Selection (LASTE Switch)
					// Laste Switchs affects AUTOPILOT ENGAGE (AE) and LANDING GEAR WARNING (LGW) buttons on the throttle. 
						// LASTE PATH (up): LGW: toggles Quantum Drive HUD (depricated 3.0), AE: Engage Quantum Drive
					MapKey(&Throttle, APPAT, CHAIN(EXEC("MapKey(&Throttle,APENG,PULSE + Flight_QD_Engage);"),EXEC("MapKey(&Throttle,LDGH,PULSE + Flight_QD_HUD);")));
						// LASTE ALT/HDG (mid): LGW: toggles Matches Target Velocity, AE: toggles Decouple mode. Press and HOLD LGW to Eject!
					MapKeyR(&Throttle, APPAT, CHAIN(EXEC("MapKey(&Throttle,APENG,PULSE + Systems_IFCS_Decouple);"),EXEC("MapKey(&Throttle,LDGH,TEMPO(PULSE + Flight_Match_Target_Velocity, PULSE + Flight_Eject, Eject_Hold_Timer));")));
						// LASTE ALT (down): LGW: toggles Landing Mode (extract gear, call ATC for landing), AE: Toggles Flight Ready mode(autostart). Press and HOLD LGW to enable Auto-Land mode.
					MapKey(&Throttle, APALT, CHAIN(EXEC("MapKey(&Throttle,APENG,PULSE + Flight_Ready_Mode);"),EXEC("MapKey(&Throttle,LDGH,TEMPO(PULSE + Flight_Landing_Mode, Flight_Auto_Land, Auto_Land_Hold_Timer));")));
						// LASTE ALT/HDG (mid): LGW: toggles Matches Target Velocity, AE: toggles Decouple mode. Press and HOLD LGW to Eject!
					MapKeyR(&Throttle, APALT, CHAIN(EXEC("MapKey(&Throttle,APENG,PULSE + Systems_IFCS_Decouple);"),EXEC("MapKey(&Throttle,LDGH,TEMPO(PULSE + Flight_Match_Target_Velocity, PULSE + Flight_Eject, Eject_Hold_Timer));")));
				
			// 2.7 Views (Pinky, S3, LTB)
					// Pinky switch controls cameras - Forward-Middle-Forward will cycle thru available cameras. Backwards will keep camera button pressed so you can change the camera angle by moving the mouse
					MapKey(&Throttle, PSF, PULSE + View_Switch);
					// we don;t want release of this switch to trigger another view, or do we?
					MapKeyR(&Throttle, PSF, PULSE + View_Switch);
					MapKey(&Throttle, PSB, PULSE + View_Switch);
					MapKeyR(&Throttle, PSB, PULSE + View_Switch);
					
			//2.8 LTB Center EDTracker/TrackIR
					MapKeyIO(&Throttle, LTB, View_TrackIR_Precision, CHAIN(View_Look_Ahead, D(), View_Center_HeadTracking));

			//2.9 SC Head Look Toggle, Mouse Click?
					// SC used as Mouse Click with paddle, else toggles Mouse Mode (whatver its called now)
				//	MapKeyIO(&Throttle, SC, Flight_Mouse_Mode_Toggle, MOUSE_LEFT); // trying new 2.6 definitions of mouse mode used to be look ahead?
					
			//2.10 Boat Switch
					// Apply custom curves for Sensitivity, Normal or Agility
						// Back is Sensitivity mode
					MapKey(&Throttle, BSB, EXEC ("Sensitivity_Mode();"));
						// Middle is Normal mode
					MapKeyR(&Throttle, BSB, EXEC ("Precision_Mode();"));
						// Forward is Agility mode
					MapKey(&Throttle, BSF, EXEC ("Agility_Mode();"));
						// Middle is Normal mode
					MapKeyR(&Throttle, BSF, EXEC ("Precision_Mode();"));
				
			//2.11 China Hat controls IFCS Safeties
					// Forward: Decouple / with paddle: ESP Toggle
					// Backward: Gsafe Mode Toggle / with paddle: CommStab mode toggle
					MapKeyIO (&Throttle, CHF, Systems_IFCS_ESP_Toggle, Systems_IFCS_Decouple);
					MapKeyIO (&Throttle, CHB, Systems_IFCS_COMSTAB, Systems_IFCS_GSafe);
							
			//2.12 EFL OVER/NORM free ****
					MapKey(&Throttle, EFLOVER , 0);
					MapKey(&Throttle, EFLNORM , 0);
				// EFR OVER/NORM also empty **** 
					MapKey(&Throttle, EFROVER , 0);
					MapKey(&Throttle, EFRNORM , 0);
					
			//2.13 Boost and SpeedBrakes (SPD, Throttle)
					// SPDB Key
					MapKeyIO(&Throttle, SPDB, 
					//With Paddle (Break)
					TEMPO(Movement_Break, CHAIN(Movement_Break,Movement_Boost), Emergency_Breaks_Timer),
					//Without Paddle (Boost)
					Movement_Boost);

					// SPDF Key
					MapKeyIO(&Throttle, SPDF, 
					//With Paddle (Emergency Break)
					CHAIN(Movement_Boost, Movement_Break),
					//Without Paddle (AfterBurner)
					Movement_Afterburner);
							
			//2.14 ENG OPER (IGN used, MOTOR Free)
					// Lights Toggle
					MapKey(&Throttle, EORIGN, SEQ(CHAIN(PULSE + Systems_Toggle_Lights , PULSE + LED(&Throttle, LED_INTENSITY, 0)) , CHAIN(PULSE + Systems_Toggle_Lights , PULSE + LED(&Throttle, LED_INTENSITY, LED_Level))));
					// Radar Zoom Toggle ','
					MapKey(&Throttle, EOLIGN, PULSE+Systems_Radar_Range);
					
			//2.15 APU on/off toggles suicide mode (self destruct)
					MapKey(&Throttle, APUON, EXEC("ActKey(KEYON + Flight_Self_Destruct);DeferCall(2000, &ActKey, Flight_Self_Destruct);"));
					MapKey(&Throttle, APUOFF, EXEC("ActKey(KEYON + Flight_Self_Destruct);DeferCall(2000, &ActKey, Flight_Self_Destruct);"));
					
			//2.16 LEDs
					// Power On
						// initialize LED lighting
					ActKey(PULSE+LED(&Throttle, LED_INTENSITY, LED_Level));
					ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1)); //set LED 1 ON, as Weapon Group 1 default
					ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2)); //set LED 2 OFF
					ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3)); //set LED 3 OFF
					ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4)); //set LED 4 OFF
					ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED5)); //set LED 5 OFF
						// LED 3-5 help to identify deadzone for Left Throttle (all LEDs will be OFF when Left Throttle is on IDLE)
					KeyAxis(&Throttle, THR_LEFT, 0, AXMAP2(7,
						//1
						CHAIN
						(
							PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED3),
							PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4),
							PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED5)
						),
						//2
						CHAIN
						(
							PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3),
							PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4),
							PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED5)
						),
						//3
						CHAIN
						(
							PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3),
							PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4),
							PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED5)
						),
						//4
						CHAIN
						(
							PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3),
							PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4),
							PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED5)
						),
						//5
						CHAIN
						(
							PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3),
							PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4),
							PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED5)
						),
						//6
						CHAIN
						(
							PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3),
							PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4),
							PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED5)
						),
						//7
						CHAIN
						(
							PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED3),
							PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4),
							PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED5)
						)
					));
				
				
				
		// 3.0 Joystick Mappings

			//3.1 Hat 4 (Thumb switch)
					// H4 Up
					MapKeyIOUMD(&Joystick, H4U, 
					//FLAPS UP (MFD/HUD Interaction Mode) and Paddle
					0,
					//FLAPS UP (MFD/HUD Interaction Mode) 
					PULSE + HUD_Up,
					//Flaps MVR (Flight mode) and Paddle
					Shields_Transfer_Forward,
					//Flaps MVR (Flight mode)
					PULSE + View_Zoom_In,
					//Flaps DN (Camera Director Mode) and Paddle
					0,
					//Flaps DN (Camera Director Mode)
					Camera_Target_Offset_Up);

					// H4 Left
					MapKeyIOUMD(&Joystick, H4L, 
					//FLAPS UP (MFD/HUD Interaction Mode) and Paddle
					0,
					//Flaps UP
					PULSE + HUD_Left,
					//Flaps MVR (Flight mode) and Paddle
					EXEC("CMChaff();"),
					//Flaps MVR (Flight mode)
					Weapons_Countermeasure_Change,
					//Flaps DN (Camera Director Mode) and Paddle
					0,
					//Flaps DN (Camera Director Mode)
					Camera_Target_Offset_Left);

					// H4 Right
					MapKeyIOUMD(&Joystick, H4R, 
					//FLAPS UP (MFD/HUD Interaction Mode) and Paddle
					0,
					//FLAPS UP (MFD/HUD Interaction Mode) 
					PULSE + HUD_Right,
					//Flaps MVR (Flight mode) and Paddle
					EXEC("CMFlare();"),
					//Flaps MVR (Flight mode)
					Weapons_Countermeasure_Launch,
					//Flaps DN (Camera Director Mode) and Paddle
					0,
					//Flaps DN (Camera Director Mode)
					Camera_Target_Offset_Right);

					// H4 Down
					MapKeyIOUMD(&Joystick, H4D, 
					//FLAPS UP (MFD/HUD Interaction Mode) and Paddle
					0,
					//FLAPS UP (MFD/HUD Interaction Mode) 
					PULSE + HUD_Down,
					//Flaps MVR (Flight mode) and Paddle
					Shields_Transfer_Backward,
					//Flare Flare Flare 
					//Flaps MVR (Flight mode)
					PULSE + View_Zoom_Out,
					//Flaps DN (Camera Director Mode) and Paddle
					0,
					//Flaps DN (Camera Director Mode)
					Camera_Target_Offset_Down);

					// H4 Press
					MapKeyIOUMD(&Joystick, H4P, 
					//FLAPS UP (MFD/HUD Interaction Mode) and Paddle
					PULSE + HUD_Select,
					//FLAPS UP (MFD/HUD Interaction Mode) 
					PULSE + HUD_Accept,
					//Flaps MVR (Flight mode) and Paddle
					PULSE + Shields_Reset,
					//Flaps MVR (Flight mode)
					PULSE + Systems_Power_Reset,
					//Flaps DN (Camera Director Mode) and Paddle
					0,
					//Flaps DN (Camera Director Mode)
					Camera_Reset_Previous_View);

			//3.2 DMS 
					// DMS Up
					MapKeyIOUMD(&Joystick, H3U, 
					//FLAPS UP (MFD/HUD Interaction Mode) and Paddle
					0,
					//FLAPS UP (MFD/HUD Interaction Mode) 
					PULSE + HUD_MFD_Up,
					//Flaps MVR (Flight mode) and Paddle
					Shields_Transfer_Top,
					//Flaps MVR (Flight mode)
					Shields_Transfer_Forward,
					//Flaps DN (Camera Director Mode) and Paddle
					Camera_Zoom_In,
					//Flaps DN (Camera Director Mode)
					Camera_Strafe_Up);

					// DMS Left
					MapKeyIOUMD(&Joystick, H3L, 
					//FLAPS UP (MFD/HUD Interaction Mode) and Paddle
					PULSE + HUD_Screen_Left,
					//FLAPS UP (MFD/HUD Interaction Mode)
					PULSE + HUD_MFD_Left,
					//Flaps MVR (Flight mode) and Paddle
					Systems_Cooler_Decrease_Rate,
					//Flaps MVR (Flight mode)
					Shields_Transfer_Left,
					//Flaps DN (Camera Director Mode) and Paddle
					Camera_Background_Blur_Decrease,
					//Flaps DN (Camera Director Mode)
					Camera_DoF_Decrease);

					// DMS Right
					MapKeyIOUMD(&Joystick, H3R, 
					//FLAPS UP (MFD/HUD Interaction Mode) and Paddle
					PULSE + HUD_Screen_Right,
					//FLAPS UP (MFD/HUD Interaction Mode)
					PULSE + HUD_MFD_Right,
					//Flaps MVR (Flight mode) and Paddle
					Systems_Cooler_Increase_Rate,
					//Flaps MVR (Flight mode)
					Shields_Transfer_Right,
					//Flaps DN (Camera Director Mode) and Paddle
					Camera_Background_Blur_Increase,
					//Flaps DN (Camera Director Mode)
					Camera_DoF_Increase);

					// DMS Down
					MapKeyIOUMD(&Joystick, H3D,
					//FLAPS UP (MFD/HUD Interaction Mode) and Paddle
					0,
					//FLAPS UP (MFD/HUD Interaction Mode) 
					PULSE + HUD_MFD_Down,
					//Flaps MVR (Flight mode) and Paddle
					Shields_Transfer_Bottom,
					//Flaps MVR (Flight mode)
					Shields_Transfer_Backward,
					//Flaps DN (Camera Director Mode) and Paddle
					Camera_Zoom_Out,
					//Flaps DN (Camera Director Mode)
					Camera_Strafe_Down);
					
			// 3.3 TMS
				// Direction (when Hold) / With Paddle (when Hold)
					// Targeting controlled by TMS
						// UP Target Reticle (Pin Target) / Cycle Pinned
					MapKeyIO(&Joystick, H2U, PULSE + Targeting_Cycle_Pinned_Target, TEMPO(Targeting_Focus_Reticle	, PULSE + Targeting_Pin_Target, Targeting_Hold_Timer));
						// DOWN Target Nearest Hostile (Pin Target) / Cycle Pinned Back
					MapKeyIO(&Joystick, H2D, PULSE + Targeting_Cycle_Back_Pinned_Target, TEMPO(Targeting_Nearest_Hostile	, PULSE + Targeting_Pin_Target, Targeting_Hold_Timer));
						// RIGHT Cycle Hostile / Cycle Friendly
					MapKeyIO(&Joystick, H2R, PULSE + Targeting_Cycle_Friendly	, PULSE + Targeting_Cycle_Hostile);
						// LEFT Cycle Hostile Back / Cycle Friendly Back
					MapKeyIO(&Joystick, H2L, PULSE + Targeting_Cycle_Back_Friendly	, PULSE + Targeting_Cycle_Back_Hostile);
					
			//3.4 Triger Button (TG1, TG2, S2, Hat 1)
					// TG1 Fires Weapon Group 1
					MapKey(&Joystick, TG1, Weapons_Fire_G1);	// Fire weapon group '1' or '2'
					// TG2 fires Weapon Groups 1+2+3+4
					MapKey(&Joystick, TG2, CHAIN(Weapons_Fire_G1, Weapons_Fire_G2, Weapons_Fire_G3, Weapons_Fire_G4));	// Fire weapon group '1' through '4'
					
			//3.5 S1 cylces between Weapon Groups 1 - 4 for TG1, along with LEDs 1 & 2
						// LEDs 1 & 2 will help you identify the selected weapon group
							// LED 1 ON, LED 2 OFF: Weapon Group 1
							// LED 1 OFF, LED 2 ON: Weapon Group 2
							// LED 1 ON, LED 2 ON: Weapon Group 3
							// LED 1 OFF, LED 2 OFF: Weapon Group 4
					MapKey(&Joystick, S1, SEQ(CHAIN(EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1+LED2));"),EXEC("MapKey(&Joystick, TG1, Weapons_Fire_G2);")),CHAIN(EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1+LED2));"),EXEC("MapKey(&Joystick, TG1, Weapons_Fire_G3);")),CHAIN(EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1-LED2));"),EXEC("MapKey(&Joystick, TG1, Weapons_Fire_G4);")),CHAIN(EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1-LED2));"),EXEC("MapKey(&Joystick, TG1, Weapons_Fire_G1);"))));
					
			//3.6 S2 locks Missiles, hold to fire
					// S2 with paddle Mouse 1 click (for AR system) instead of decouple Systems_IFCS_Decouple
					MapKeyIO(&Joystick, S2, TEMPO(PULSE + Weapons_Lock_Missile, PULSE + Weapons_Lock_Missile, Lock_Multiple_Missiles_Timer), Weapons_Missile);
					
			//3.7 Hat 1	
					// Toggle Gimble Lock
					MapKey(&Joystick, H1U, Weapons_Gimble_Lock);
					// Toggle Reticle mode
					MapKey(&Joystick, H1D, Weapons_Reticle_Mode);
					//H1R will transfer power to Weapons (pew pew)
					MapKey(&Joystick, H1R, Systems_Power_Weapons);
					// H1L will transfer power to Shields and Avionics (GTFO mode)
					MapKey(&Joystick, H1L, CHAIN(Systems_Power_Shields, Systems_Power_Engines));
					
			//3.8 S3
					// S3 
					MapKeyIOUMD(&Joystick, S3,
					//FLAPS UP (MFD/HUD Interaction Mode) and Paddle
					0,
					//FLAPS UP (MFD/HUD Interaction Mode) 
					PULSE + HUD_Cancel,
					//Flaps MVR (Flight mode) and Paddle
					0,
					//Flaps MVR (Flight mode)
					View_Look_Behind,
					//Flaps DN (Camera Director Mode) and Paddle
					0,
					//Flaps DN (Camera Director Mode)
					Camera_Toggle_Orbit_Cam);
					
			//3.9 Paddle (S4 used as IO switch for all other buttons)
			MapKey (&Joystick, S4, 0); // make sure nothing happens when pressing paddle alone (instead of DX4 lol)

	}	// End of Warthog HOTAS config
	

///////// DUAL STICKS 

if (Controller_TM16000_DualStick==1)
	{
	// X Axis - Yaw
		//TM16000 Right - Stick Left/Right
		MapAxis(&right, JOYX, DX_X_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	// Y Axis - Pitch	
		//TM16000 Right - Stick Forwards/Backwards
		MapAxis(&right, JOYY, DX_Y_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	// Z Axis - Roll
		//TM16000 Right - Rudder Twist
		MapAxis(&right, RUDDER, DX_Z_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);

	// Axis Assignment - Translation Axis
		// XROT Axis - Strafe Left / Right
			//TM16000 Left - Stick Left/Right
			MapAxis(&left, JOYX, DX_XROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
		// YROT Axis - Strafe Forwards / Backwards
			//TM16000 Left - Stick Forwards/Backwards
			MapAxis(&left, JOYY, DX_YROT_AXIS, AXIS_REVERSED, MAP_ABSOLUTE);
		// ZROT Axis - Strafe Up / Down
			//TM16000 Left - Rudder Twist
			MapAxis(&left, RUDDER, DX_ZROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	
	// Axis Assignement - Throttle Axis and Slider Axis
		// THROTTLE Axis - Throttle 0-100
			//TM16000 Left - Throttle
			MapAxis(&left, THR, DX_THROTTLE_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
		// SLIDER Axis - Dynamic Zoom In/Out
			//TM16000 Right - Throttle
			MapAxis(&right, THR, DX_SLIDER_AXIS, AXIS_REVERSED, MAP_ABSOLUTE);
		
			//Makes the Left Stick Trigger the Shift layer trigger
			SetShiftButton(&left, TS1);

			// Left Stick
				// make sure nothing happens when pressing left trigger alone
				MapKey (&left, TS1, 0); // remember: //Map_IO (Shift,noShift)
				//TS2: 
				MapKey (&left, TS2, CHAIN(Movement_Break,Movement_Boost)); 
				//TS3: Brake  
				MapKey (&left, TS3, TEMPO(PULSE + Weapons_Countermeasure_Launch, PULSE + Weapons_Countermeasure_Change, Countermeasure_Timer));
				//TS4: 
				MapKey (&left, TS4, Voice_Comms_PPT);
				//Hat
				MapKeyIO (&left, H1U, Shields_Transfer_Forward, TEMPO(PULSE + Systems_Power_Reset, PULSE + Shields_Reset, Reset_Hold_Timer));
				MapKeyIO (&left, H1R, Shields_Transfer_Right, Systems_Power_Weapons);
				MapKeyIO (&left, H1D, Shields_Transfer_Backward, View_Look_Behind);
				MapKeyIO (&left, H1L, Shields_Transfer_Left, CHAIN(Systems_Power_Shields, Systems_Power_Engines));				
				//below to be used for controlling mouse (viewing around/augmented reality mode)
				//AXIS(DirectX axis name, increment, delay before repeat);
				//MapKey(&left, H1U, AXIS(MOUSE_Y_AXIS, -80, 20));
				//MapKey(&left, H1R, AXIS(MOUSE_Y_AXIS, 80, 20));
				//MapKey(&left, H1D, AXIS(MOUSE_X_AXIS, -80, 20));
				//MapKey(&left, H1L, AXIS(MOUSE_X_AXIS, 80, 20));
				//MapKey(&left, H1U, REXEC(0, 2, "DXAxis(MOUSE_Y_AXIS, -1);"));
				//MapKey(&left, H1R, REXEC(1, 2, "DXAxis(MOUSE_X_AXIS, 1);"));
				//MapKey(&left, H1D, REXEC(0, 2, "DXAxis(MOUSE_Y_AXIS, 1);"));
				//MapKey(&left, H1L, REXEC(1, 2, "DXAxis(MOUSE_X_AXIS, -1);"));
				//B5-7
				MapKey (&left, B5, PULSE + Systems_Toggle_Lights);
				MapKey (&left, B6, PULSE + Flight_Ready_Mode);
				MapKey (&left, B7, TEMPO(PULSE + Flight_Landing_Mode, Flight_Auto_Land, Auto_Land_Hold_Timer));
				//B8-10
				MapKey (&left, B8, EXEC ("Sensitivity_Mode();"));
				MapKey (&left, B9, EXEC ("Precision_Mode();"));
				MapKey (&left, B10, EXEC ("Agility_Mode();"));
				//B11-13
				MapKeyIO (&left, B11, TEMPO(0, PULSE + Flight_Eject, Eject_Hold_Timer), PULSE + Systems_Toggle_Weapons);
				MapKeyIO (&left, B12, TEMPO(0, EXEC("ActKey(KEYON + Flight_Self_Destruct);DeferCall(2000, &ActKey, Flight_Self_Destruct);")), PULSE + Systems_Toggle_Shields);
				MapKey (&left, B13, PULSE + Systems_Toggle_Engines);
				//B14-16
				MapKey (&left, B14, View_Mobiglass);
				MapKey (&left, B15, Flight_Match_Target_Velocity);
				MapKey (&left, B16, PULSE + Flight_QD_Engage);
				//code for having 2 buttons in one after short/long press
				//TEMPO(key1, key2, delay)
			// Right Stick
				// TS1: fire G1, fire G1-4 with shift (left trigger)
				MapKeyIO(&right, TS1, CHAIN(Weapons_Fire_G1, Weapons_Fire_G2, Weapons_Fire_G3, Weapons_Fire_G4), Weapons_Fire_G1); //trigger
				// TS2: Lock/Fire Missiles, Cycle Weapon Groups 1-4 for main trigger (with Shift)
				MapKeyIO(&right, TS2, TEMPO (PULSE+Weapons_Lock_Missile,PULSE+Weapons_Lock_Missile,Lock_Multiple_Missiles_Timer), Weapons_Missile);
				// TS3 (left button) Afterburner
				MapKey (&right, TS3, Movement_Afterburner);
				// TS4 (right button) GSafe
				MapKey (&right, TS4, PULSE + Systems_IFCS_GSafe);
				//Hat
				MapKeyIO (&right, H1U, Targeting_Cycle_Pinned_Target, TEMPO(Targeting_Focus_Reticle	, PULSE + Targeting_Pin_Target, Targeting_Hold_Timer));
				MapKeyIO (&right, H1R, Targeting_Cycle_Friendly, Targeting_Cycle_Hostile);
				MapKeyIO (&right, H1D, Targeting_Cycle_Back_Pinned_Target, TEMPO(Targeting_Nearest_Hostile, PULSE + Targeting_Pin_Target, Targeting_Hold_Timer));
				MapKeyIO (&right, H1L, Targeting_Cycle_Back_Friendly, Targeting_Cycle_Back_Hostile);
				//B5-7
				MapKey (&right, B5, 0);
				MapKey (&right, B6, 0);
				MapKey (&right, B7, PULSE + Systems_Radar_Range);
				//B8-10
				MapKeyIO (&right, B8, CHAIN(View_Look_Ahead, D(), View_Center_HeadTracking), PULSE + Systems_IFCS_Decouple);
				MapKeyIO (&right, B9, PULSE + View_TrackIR_Precision, PULSE + Systems_IFCS_COMSTAB);
				MapKey (&right, B10, PULSE + Systems_IFCS_ESP_Toggle);
				//B11-13
				MapKey (&right, B11, SEQ(
		//I leave room here to configure the LEDs on the sticks to light up to help identify selected weapon group
		//CHAIN(
		//EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1+LED2));"),
		EXEC("MapKeyIO(&right, TS1, CHAIN(Weapons_Fire_G1, Weapons_Fire_G2, Weapons_Fire_G3, Weapons_Fire_G4), Weapons_Fire_G2);")
		//)
		,
		//CHAIN(
		//EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1+LED2));"),
		EXEC("MapKeyIO(&right, TS1, CHAIN(Weapons_Fire_G1, Weapons_Fire_G2, Weapons_Fire_G3, Weapons_Fire_G4), Weapons_Fire_G3);")
		//)
		,
		//CHAIN(
		//EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1-LED2));"),
		EXEC("MapKeyIO(&right, TS1, CHAIN(Weapons_Fire_G1, Weapons_Fire_G2, Weapons_Fire_G3, Weapons_Fire_G4), Weapons_Fire_G4);")
		//)
		,
		//CHAIN(
		//EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1-LED2));"),
		EXEC("MapKeyIO(&right, TS1, CHAIN(Weapons_Fire_G1, Weapons_Fire_G2, Weapons_Fire_G3, Weapons_Fire_G4), Weapons_Fire_G1);")
		//)
		));
				MapKey (&right, B12, PULSE + Weapons_Reticle_Mode);
				MapKey (&right, B13, PULSE + Weapons_Gimble_Lock);
				//B14-16
				MapKey (&right, B14, PULSE + View_Switch);
				MapKey (&right, B15, 0);
				MapKey (&right, B16, 0);
				
				//MapKeyIO(&right, TS3, PULSE + Targeting_Cycle_Back_Friendly, PULSE + Targeting_Cycle_Back_Hostile);

// for switching ts1 weapon group MapKey(&Joystick, S1, SEQ(CHAIN(EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1+LED2));"),EXEC("MapKey(&Joystick, TG1, CHAIN(Weapons_Fire_G2, Systems_IFCS_ESP));")),CHAIN(EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1+LED2));"),EXEC("MapKey(&Joystick, TG1, CHAIN(Weapons_Fire_G3, Systems_IFCS_ESP));")),CHAIN(EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1-LED2));"),EXEC("MapKey(&Joystick, TG1, CHAIN(Weapons_Fire_G4, Systems_IFCS_ESP));")),CHAIN(EXEC("ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1-LED2));"),EXEC("MapKey(&Joystick, TG1, CHAIN(Weapons_Fire_G1, Systems_IFCS_ESP));"))));			
	
			

	} //end of TM16000 Dual Stick config
	
///////// RUDDER virtual STRAFEAXIS initialization
if (Controller_TMFR_Pedals==1)
{
	//Axis Assignment - Translation Axis
	// Z Axis - Roll
		//TRUDDER - Pedals R/L Twist
			MapAxis(&TFRPRudder, TRUDDER, DX_Z_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);

	//Axis Assignment - Translation Axis
	// XROT Axis - Strafe Left / Right
		//TRUDDER - Left/Right Pedals
			//XROT axis is not assigned here, instead assigned on the EventHandler section. This is done so we can assign custom curves to the combined axis.
			MapAxis(&TFRPRudder, TRPRIGHT, 0, AXIS_NORMAL, MAP_ABSOLUTE);
			MapAxis(&TFRPRudder, TRPLEFT, 0, AXIS_NORMAL, MAP_ABSOLUTE);
} // end of TMFR Pedals config
	
	//Set Starting IFCS Flight Mode
	Precision_Mode();		//You may change to Precision_Mode or Sensitivity_Mode or Agility_Mode if desired.
	
} //end of Main Initialization
	
///////// RUDDER together with EventHandler to combine the two axis for strafe

int EventHandle(int type, alias o, int x)
{
	DefaultMapping(&o, x);
	if (Controller_TMFR_Pedals==1)
	{
		if (&o == &TFRPRudder) 
		{  
			GetAxisData(&o, x);
			////axdata.val = AxisVal(o[x], &axdata);
			if(x == TRPLEFT | x == TRPRIGHT) 
			{ 
				axdata.locked = 1; //disable the toe brakes??
				//// if(!axdata.relative) GameOutput(&o, x, axdata.val);
				//// if(!axdata.locked & !axdata.relative) 
				////GameOutput(&o, x, axdata.val);
				STRAFEAXIS = -TFRPRudder[TRPRIGHT]/2 + TFRPRudder[TRPLEFT]/2;  //Toe brakes rest high, so negate and divide by 2
				GameOutput(&o, TRPRIGHT, AxisVal(STRAFEAXIS, &axdata));
				GameOutput(&o, TRPLEFT, AxisVal(-STRAFEAXIS, &axdata));
				DXAxis(DX_XROT_AXIS, STRAFEAXIS);  //Map to extra axis.
				//if  (TFRPRudder[TRPLEFT] < TFRPRudder[TRPRIGHT]) TRPCOMBO = TFRPRudder[TRPRIGHT];
				//	else TRPCOMBO = TFRPRudder[TRPLEFT];
			} // else DefaultMapping(&o, x);
			if(!axdata.locked & !axdata.relative) GameOutput(&o, x, AxisVal(o[x], &axdata)); 
		} //else DefaultMapping(&o, x);
	} //else	DefaultMapping(&o, x);
}

//end of TMFR Pedals config with EventHandler
	
// End of File
// qp
// .